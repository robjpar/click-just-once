{"version":3,"sources":["components/Container/index.js","components/Navbar/index.js","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","react_default","a","createElement","className","children","Navbar","wins","losses","cardsToGo","info","Card","src","image","alt","name","onClick","clickHandler","id","shuffle","array","sort","Math","random","cards","App","state","length","clickedCards","_this","includes","push","setState","_this2","this","components_Container","components_Navbar","map","card","components_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m3DAOeA,MAJf,SAAmBC,GACjB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAAyBJ,EAAMK,iBCwBxCC,MAzBf,SAAgBN,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0EACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,QAAqCJ,EAAMO,MAAa,IACxDN,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,UAAsCJ,EAAMQ,OAA5C,OAGJP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,eAA4CJ,EAAMS,WAAkB,MAGxER,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBJ,EAAMU,WCPnCC,MAXf,SAAcX,GACZ,OACEC,EAAAC,EAAAC,cAAA,OACEC,UAAU,MACVQ,IAAKZ,EAAMa,MACXC,IAAKd,EAAMe,KACXC,QAAS,kBAAMhB,EAAMiB,aAAajB,EAAMkB,eCFxCC,EAAU,SAAAC,GACdA,EAAMC,KAAK,kBAAMC,KAAKC,SAAW,MAGnCJ,EAAQK,OAoEOC,6MAjEbC,MAAQ,CACNF,QACAf,UAAWe,EAAMG,OACjBpB,KAAM,EACNC,OAAQ,EACRE,KAAM,+BAGRkB,aAAe,KAEfX,aAAe,SAAAC,GACbC,EAAQK,GACR,IAAIf,EAAYoB,EAAKH,MAAMjB,UACvBF,EAAOsB,EAAKH,MAAMnB,KAClBC,EAASqB,EAAKH,MAAMlB,OACpBE,EAAOmB,EAAKH,MAAMhB,KAEtBD,IAEIoB,EAAKD,aAAaE,SAASZ,IAC7BV,IACAC,EAAYe,EAAMG,OAClBjB,EAAO,yBACPmB,EAAKD,aAAe,IAEpBC,EAAKD,aAAaG,KAAKb,GAGP,IAAdT,IACFF,IACAE,EAAYe,EAAMG,OAClBjB,EAAO,wBACPmB,EAAKD,aAAe,IAGlBnB,IAAce,EAAMG,OAAS,IAC/BjB,EAAO,6BAGTmB,EAAKG,SAAS,CAAER,QAAOf,YAAWF,OAAMC,SAAQE,kFAGzC,IAAAuB,EAAAC,KACP,OACEjC,EAAAC,EAAAC,cAACgC,EAAD,KACElC,EAAAC,EAAAC,cAACiC,EAAD,CACE3B,UAAWyB,KAAKR,MAAMjB,UACtBF,KAAM2B,KAAKR,MAAMnB,KACjBC,OAAQ0B,KAAKR,MAAMlB,OACnBE,KAAMwB,KAAKR,MAAMhB,OAElBwB,KAAKR,MAAMF,MAAMa,IAAI,SAAAC,GAAI,OACxBrC,EAAAC,EAAAC,cAACoC,EAAD,CACEC,IAAKF,EAAKpB,GACVA,GAAIoB,EAAKpB,GACTH,KAAMuB,EAAKvB,KACXF,MAAOyB,EAAKzB,MACZI,aAAcgB,EAAKhB,yBA1DbwB,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.894221a0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n  return <div className=\"container text-center\">{props.children}</div>;\n}\n\nexport default Container;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav className=\"navbar fixed-top navbar-dark bg-light justify-content-center mt-3 mx-2\">\r\n      <ul className=\"navbar-nav\">\r\n        <li className=\"nav-item\">\r\n          <h3>\r\n            <span className=\"text-success\">WINS {props.wins}</span>{\" \"}\r\n            <span className=\"text-danger\">LOSSES {props.losses} </span>\r\n          </h3>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <h2>\r\n            <span className=\"text-warning\">CARDS TO GO {props.cardsToGo}</span>{\" \"}\r\n          </h2>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <h4>\r\n            <span className=\"text-primary\">{props.info}</span>\r\n          </h4>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\n\nfunction Card(props) {\n  return (\n    <img\n      className=\"m-3\"\n      src={props.image}\n      alt={props.name}\n      onClick={() => props.clickHandler(props.id)}\n    />\n  );\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\r\nimport Container from \"./components/Container\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Card from \"./components/Card\";\r\nimport cards from \"./cards.json\";\r\n\r\nconst shuffle = array => {\r\n  array.sort(() => Math.random() - 0.5);\r\n};\r\n\r\nshuffle(cards);\r\n\r\nclass App extends Component {\r\n  state = {\r\n    cards,\r\n    cardsToGo: cards.length,\r\n    wins: 0,\r\n    losses: 0,\r\n    info: \"click each card just once\"\r\n  };\r\n\r\n  clickedCards = [];\r\n\r\n  clickHandler = id => {\r\n    shuffle(cards);\r\n    let cardsToGo = this.state.cardsToGo;\r\n    let wins = this.state.wins;\r\n    let losses = this.state.losses;\r\n    let info = this.state.info;\r\n\r\n    cardsToGo--;\r\n\r\n    if (this.clickedCards.includes(id)) {\r\n      losses++;\r\n      cardsToGo = cards.length;\r\n      info = \"YOU LOST! NEXT GAME...\";\r\n      this.clickedCards = [];\r\n    } else {\r\n      this.clickedCards.push(id);\r\n    }\r\n\r\n    if (cardsToGo === 0) {\r\n      wins++;\r\n      cardsToGo = cards.length;\r\n      info = \"YOU WON! NEXT GAME...\";\r\n      this.clickedCards = [];\r\n    }\r\n\r\n    if (cardsToGo === cards.length - 1) {\r\n      info = \"click each card just once\";\r\n    }\r\n\r\n    this.setState({ cards, cardsToGo, wins, losses, info });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Navbar\r\n          cardsToGo={this.state.cardsToGo}\r\n          wins={this.state.wins}\r\n          losses={this.state.losses}\r\n          info={this.state.info}\r\n        />\r\n        {this.state.cards.map(card => (\r\n          <Card\r\n            key={card.id}\r\n            id={card.id}\r\n            name={card.name}\r\n            image={card.image}\r\n            clickHandler={this.clickHandler}\r\n          />\r\n        ))}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}